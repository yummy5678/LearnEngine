Vulkanを使って三角形を描画するには、いくつかの重要なステップを踏む必要があります。
以下に、初心者向けに分かりやすく説明します。

1. インスタンスの作成
Vulkanの使用を開始するために、まずインスタンスを作成します。
これは、Vulkan APIとプログラムをつなぐものです。

2. 物理デバイスの選択
次に、Vulkanが利用できる物理デバイス（通常はGPU）を選択します。
プログラムがどのGPUを使用するかを決定します。

3. 論理デバイスとキューの作成
物理デバイスと通信するために、論理デバイスを作成します。
論理デバイスは、物理デバイスとやり取りするためのインターフェースです。
また、コマンドを実行するためのキューを作成します。

4. ウィンドウの作成
描画結果を表示するためのウィンドウを作成します。
Vulkanでは、ウィンドウを操作するために
外部ライブラリ（GLFWやSDLなど）を使用することが一般的です。

5. スワップチェーンの設定
スワップチェーンは、描画した画像をウィンドウに表示するためのバッファです。
これを設定することで、描画結果をユーザーに見せることができます。

6. 画像ビューの作成
スワップチェーンのバッファにアクセスするための画像ビューを作成します。
これにより、描画対象のバッファを参照できます。

7. レンダーパスの設定
レンダーパスは、描画操作の一連の流れを定義します。
これは、どのように画像が描画され、処理されるかを指定します。

8. フレームバッファの作成
レンダーパスとスワップチェーンのバッファを結びつけるために、
フレームバッファを作成します。
これにより、描画結果がウィンドウに表示されるようになります。

9. シェーダーモジュールの作成
シェーダーは、GPU上で実行される小さなプログラムです。
Vulkanでは、通常、GLSLでシェーダーを記述し、それをSPIR-V形式にコンパイルして使用します。

10. グラフィックスパイプラインの設定
グラフィックスパイプラインは、描画プロセスの各ステージを設定するものです。
ここで、シェーダーや頂点入力、ビュー変換、ラスタライゼーションなどの設定を行います。

11. コマンドバッファの作成と記録
コマンドバッファは、GPUに実行させる命令を記録するものです。
描画コマンドをこのバッファに記録し、後で実行します。

12. 同期オブジェクトの作成
同期オブジェクト（セマフォやフェンスなど）を作成して、描画の進行状況を管理します。
これにより、描画処理が正しい順序で行われるようになります。

13. 描画の実行
最後に、コマンドバッファを実行して三角形を描画します。
これには、コマンドバッファをキューに送信し、
スワップチェーンのバッファをウィンドウに表示する処理が含まれます。
これらのステップを順に行うことで、Vulkanを使って三角形を描画することができます。
それぞれのステップは詳細にわたるため、チュートリアルや公式ドキュメントを参照しながら進めるとよいでしょう。



https://qiita.com/tositada_nakada/items/db0f01c1c8c2945f786b


https://www.youtube.com/watch?v=Ow-ouwxxfP8




















